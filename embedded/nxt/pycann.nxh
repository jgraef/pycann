/* pycann.nxh
 * A Python/C hybrid for fast neural networks in Python and on NXT
 * Copyright (C) 2011 by Janosch Gr√§f <janosch.graef@gmx.net>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * NOTE: Tested with Enhanced Firmware 1.28 and NXTCam 2.0
 */


#define PYCANN_EMBEDDED_NXT 1

#define PYCANN_INVALID_ACTIVATION_FUNCTION 0
#define PYCANN_SIGMOID_STEP                1
#define PYCANN_SIGMOID_EXP                 2
#define PYCANN_SIGMOID_APPROX              3
#define PYCANN_LINEAR                      4


struct pycann_t {
  // number of neurons
  unsigned int size;

  // Learning rate 
  float learning_rate;
  float gamma[4];

  // Weight matrix
  float weights[][];

  // Threshold vector
  float thresholds[];

  // Activation vector
  float activations[];

  // Activations functions
  byte activation_functions[];

  // Number of inputs
  unsigned int num_inputs;

  // Input vector
  float inputs[];

  // Number of outputs
  unsigned int num_outputs;
};

// Loads pycann NXT embedded format
int pycann_load(pycann_t &net, string file) {
  int res, fsize;
  byte fh, tmp2;
  unsigned int i, j, signature;
  float tmp;

  // open file
  res = OpenFileRead(file, fsize, fh);
  if (res!=0) {
    return res;
  }

  // read and check signature
  Read(fh, signature);
  if (signature!=0x4E52) {
    return 0x03;
  }
  // read and check file format version
  Read(fh, tmp2);
  if (tmp2!=PYCANN_EMBEDDED_NXT);
  // read network size
  Read(fh, net.size);
  // read number of inputs
  Read(fh, net.num_inputs);
  // read number of outputs
  Read(fh, net.num_outputs);

  // read learning rate & gamma
  Read(fh, net.learning_rate);
  for (i=0; i<4; i++) {
    Read(fh, tmp);
    net.gamma[i] = tmp;
  }

  // init arrays
  ArrayInit(net.thresholds, 0.0, net.size);
  ArrayInit(net.activations, 0.0, net.size);
  ArrayInit(net.activation_functions, 0, net.size);
  ArrayInit(net.weights, net.activations, net.size);
  ArrayInit(net.inputs, 0.0, net.num_inputs);

  // read weights, thresholds and activations functions
  for (i=0; i<net.size; i++) {
    for (j=0; j<net.size; j++) {
      Read(fh, tmp);
      net.weights[i][j] = tmp;
    }
  }
  for (i=0; i<net.size; i++) {
    Read(fh, tmp);
    net.thresholds[i] = tmp;
  }
  for (i=0; i<net.size; i++) {
    Read(fh, tmp2);
    net.activation_functions[i] = tmp2;
  }

  // close file
  CloseFile(fh);

  return 0;
}

// Internals of a neurons
float pycann_neuron_internal(pycann_t &net, unsigned int i) {
  unsigned int j;
  float o, w, v;

  if (i<net.num_inputs) {
    o = net.inputs[i];
  }
  else {
    o = 0.0;

    for (j=0; j<net.size; j++) {
      o += net.weights[i][j]*net.activations[j];
    }
  }

  return o>=net.thresholds[i]?1.0:0.0;
}

// Run a single steps
void pycann_step(pycann_t &net) {
  unsigned int i;

  for (i=0; i<net.size; i++) {
    net.activations[i] = pycann_neuron_internal(net, i);
  }
}

// Do multiple steps
void pycann_steps(pycann_t &net, unsigned int n) {
  unsigned int i;

  for (i=0; i<n; i++) {
    pycann_step(net);
  }
}

// Set input
void pycann_set_input(pycann_t &net, float &inputs[]) {
  unsigned int i;

  for (i=0; i<net.num_inputs; i++) {
    net.inputs[i] = inputs[i];
  }
}

// Get output
void pycann_get_output(pycann_t &net, float &outputs[]) {
  unsigned int i, n0;

  n0 = net.size-net.num_outputs;

  for (i=0; i<net.num_outputs; i++) {
    outputs[i] = net.activations[n0+i];
  }
}

